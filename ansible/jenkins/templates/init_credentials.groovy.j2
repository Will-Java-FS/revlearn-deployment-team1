import com.cloudbees.plugins.credentials.Credentials
import com.cloudbees.plugins.credentials.CredentialsScope
import com.cloudbees.plugins.credentials.CredentialsMatchers
import com.cloudbees.plugins.credentials.domains.Domain
import com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl
import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl
import com.cloudbees.plugins.credentials.SystemCredentialsProvider
import hudson.util.Secret

// Define your SonarQube token details
String sonarqubeTokenString = "{{ sonarqube_api_token }}"
Secret sonarqubeToken = new Secret(sonarqubeTokenString)
String sonarqubeCredentialsId = "sonarqube-access" // Unique ID for SonarQube token

// Check if the SonarQube token credentials already exist
Credentials sonarqubeExistingCredentials = CredentialsMatchers.firstOrNull(
    SystemCredentialsProvider.instance.getCredentials(),
    CredentialsMatchers.withId(sonarqubeCredentialsId)
)

if (sonarqubeExistingCredentials) {
    // Remove existing SonarQube token credentials
    SystemCredentialsProvider.instance.removeCredentials(
        Domain.global(),
        sonarqubeExistingCredentials
    )
    println("Removed existing SonarQube token credentials with ID: ${sonarqubeCredentialsId}")
}

// Create SonarQube token credentials object
StringCredentialsImpl sonarqubeTokenCredentials = new StringCredentialsImpl(
    CredentialsScope.GLOBAL,
    sonarqubeCredentialsId,
    "User token for SonarQube",
    sonarqubeToken
)

// Add SonarQube token credentials to the Jenkins instance
SystemCredentialsProvider.instance.getCredentials().add(sonarqubeTokenCredentials)
println("SonarQube token credentials saved with ID: ${sonarqubeCredentialsId}")


// Define your AWS credentials details
String awsAccessKeyId = "{{ aws_access_key_id }}"
String awsSecretAccessKey = "{{ aws_secret_access_key }}"
String awsCredentialsId = "aws-credentials-id" // Choose a unique ID for your credentials

// Check if the AWS credentials already exist
Credentials awsExistingCredentials = CredentialsMatchers.firstOrNull(
    SystemCredentialsProvider.instance.credentials,
    CredentialsMatchers.withId(awsCredentialsId)
)

if (awsExistingCredentials) {
    // Remove existing AWS credentials
    SystemCredentialsProvider.instance.removeCredentials(
        Domain.global(),
        awsExistingCredentials
    )
    println("Removed existing AWS credentials with ID: ${awsCredentialsId}")
}

// Create AWS credentials object
UsernamePasswordCredentialsImpl awsCredentials = new UsernamePasswordCredentialsImpl(
    CredentialsScope.GLOBAL,
    awsCredentialsId,
    "AWS credentials",
    awsAccessKeyId,
    awsSecretAccessKey
)

// Add AWS credentials to the Jenkins instance
SystemCredentialsProvider.instance.getCredentials().add(awsCredentials)
println("AWS credentials saved with ID: ${awsCredentialsId}")


// Define your GitHub Personal Access Token (PAT) details
String githubApiTokenString = "{{ github_api_token }}" 
Secret githubApiToken = new Secret(githubApiTokenString)
String githubCredentialsId = "github-api-token" 

// Check if the GitHub API token credentials already exist
Credentials githubExistingCredentials = CredentialsMatchers.firstOrNull(
    SystemCredentialsProvider.instance.getCredentials(),
    CredentialsMatchers.withId(githubCredentialsId)
)

if (githubExistingCredentials) {
    // Remove existing GitHub API token credentials
    SystemCredentialsProvider.instance.removeCredentials(
        Domain.global(),
        githubExistingCredentials
    )
    println("Removed existing GitHub API token credentials with ID: ${githubCredentialsId}")
}

// Create GitHub API token credentials object
UsernamePasswordCredentialsImpl githubApiTokenCredentials = new UsernamePasswordCredentialsImpl(
    CredentialsScope.GLOBAL,
    githubCredentialsId,
    "GitHub API Token",
    "", // No username needed for GitHub API token, so leave it empty
    githubApiTokenString // Use the GitHub PAT as password
)

// Add GitHub API token credentials to the Jenkins instance
SystemCredentialsProvider.instance.getCredentials().add(githubApiTokenCredentials)
println("GitHub API token credentials saved with ID: ${githubCredentialsId}")


// Define your GitHub webhook secret token details
String githubWebhookSecret = "{{ github_webhook_secret }}"
Secret githubWebhookToken = new Secret(githubWebhookSecret)
String githubWebhookCredentialsId = "github-webhook-secret" // Unique ID for the GitHub webhook secret

// Check if the GitHub webhook secret credentials already exist
def existingGithubWebhookCredentials = SystemCredentialsProvider.instance.getCredentials().find {
    it.id == githubWebhookCredentialsId
}

if (existingGithubWebhookCredentials) {
    // Remove existing GitHub webhook secret credentials
    SystemCredentialsProvider.instance.removeCredentials(Domain.global(), existingGithubWebhookCredentials)
    println("Removed existing GitHub webhook secret credentials with ID: ${githubWebhookCredentialsId}")
}

// Create GitHub webhook secret credentials object
def githubWebhookSecretCredentials = new StringCredentialsImpl(
    CredentialsScope.GLOBAL,
    githubWebhookCredentialsId,
    "GitHub Webhook Secret Token",
    githubWebhookToken
)

// Add GitHub webhook secret credentials to the Jenkins instance
SystemCredentialsProvider.instance.store.addCredentials(Domain.global(), githubWebhookSecretCredentials)
println("GitHub webhook secret credentials saved with ID: ${githubWebhookCredentialsId}")

// Save the credentials to Jenkins
SystemCredentialsProvider.instance.store.save()
println("GitHub webhook secret credentials saved successfully")

// Save the credentials to Jenkins
SystemCredentialsProvider.instance.save()
println("All credentials saved successfully")
